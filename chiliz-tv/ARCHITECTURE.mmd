%% ARCHITECTURE.mmd
%% Complete Betting System Flow - Sequence Diagram
%% Shows full lifecycle: Deployment → Match Creation → Betting → Settlement → Claims
%% Generated: 2025-10-31

sequenceDiagram
    autonumber
    
    participant Admin as Admin<br/>(Owner/Multisig)
    participant Factory as MatchHubBeaconFactory<br/>(src/matchhub/)
    participant Registry as SportBeaconRegistry<br/>(src/)
    participant Beacon as UpgradeableBeacon<br/>(OpenZeppelin)
    participant Impl as FootballBetting/UFCBetting<br/>(Implementation)
    participant Proxy as BeaconProxy<br/>(Match Instance)
    participant PriceOracle as PriceOracle<br/>(src/oracle/)
    participant Chainlink as ChainlinkAggregator<br/>(CHZ/USD Feed)
    participant User1 as User1<br/>(Bettor)
    participant User2 as User2<br/>(Bettor)
    participant User3 as User3<br/>(Bettor)
    participant Treasury as Treasury<br/>(Fee Recipient)
    participant Settler as Settler<br/>(Oracle/Backend)

    rect rgb(230, 240, 255)
        Note over Admin,Settler: PHASE 1: SYSTEM DEPLOYMENT & SETUP
        
        Admin->>Registry: deploy SportBeaconRegistry()
        activate Registry
        Registry-->>Admin: Registry deployed at 0xREG...
        deactivate Registry
        
        Admin->>Impl: deploy FootballBetting() implementation
        activate Impl
        Impl-->>Admin: Implementation at 0xIMPL...
        deactivate Impl
        
        Admin->>Beacon: deploy UpgradeableBeacon(0xIMPL...)
        activate Beacon
        Beacon-->>Admin: Beacon deployed at 0xBEACON...
        deactivate Beacon
        
        Admin->>Registry: registerBeacon(SPORT_FOOTBALL, 0xBEACON...)
        activate Registry
        Registry->>Registry: beacons[SPORT_FOOTBALL] = 0xBEACON...
        Registry-->>Admin: emit BeaconRegistered(SPORT_FOOTBALL, 0xBEACON...)
        deactivate Registry
        
        Admin->>Factory: deploy MatchHubBeaconFactory(0xREG...)
        activate Factory
        Factory-->>Admin: Factory deployed at 0xFACTORY...
        deactivate Factory
    end

    rect rgb(255, 240, 230)
        Note over Admin,Settler: PHASE 2: MATCH CREATION
        
        Admin->>Factory: createFootballMatch(<br/>owner: admin<br/>priceFeed: 0xCHAINLINK...<br/>matchId: keccak256("REAL_MADRID_VS_BARCA")<br/>cutoffTs: 1730822400<br/>feeBps: 200 (2%)<br/>treasury: 0xTREAS...<br/>minBetUsd: 500000000 ($5))
        activate Factory
        
        Factory->>Registry: getBeacon(SPORT_FOOTBALL)
        activate Registry
        Registry-->>Factory: return 0xBEACON...
        deactivate Registry
        
        Factory->>Proxy: new BeaconProxy(0xBEACON..., "")
        activate Proxy
        Note right of Proxy: Proxy created<br/>Points to Beacon
        
        Factory->>Proxy: initialize(<br/>owner, priceFeed, matchId,<br/>cutoffTs, feeBps, treasury, minBetUsd)
        
        Proxy->>Beacon: implementation()
        activate Beacon
        Beacon-->>Proxy: return 0xIMPL... (FootballBetting)
        deactivate Beacon
        
        Proxy->>Impl: delegatecall initialize(...)
        activate Impl
        
        Note right of Impl: FootballBetting.initialize()<br/>calls _initSport(..., 3 outcomes)
        
        Impl->>Impl: _initSport(owner, priceFeed, matchId,<br/>cutoffTs, feeBps, treasury,<br/>minBetUsd, 3)
        
        Note right of Impl: MatchBettingBase.initializeBase()<br/>- Set all state variables<br/>- Grant ADMIN_ROLE, SETTLER_ROLE, PAUSER_ROLE<br/>- Initialize pools[0..2] = 0<br/>- Set outcomesCount = 3
        
        Impl-->>Proxy: emit Initialized(...)
        deactivate Impl
        
        Proxy-->>Factory: Initialization complete
        Factory-->>Admin: return proxyAddress (0xMATCH...)
        Factory-->>Admin: emit MatchHubCreated(SPORT_FOOTBALL, 0xMATCH..., matchId, admin)
        deactivate Factory
        deactivate Proxy
    end

    rect rgb(240, 255, 240)
        Note over Admin,Settler: PHASE 3: USERS PLACE BETS
        
        Note over User1,User3: Users bet on different outcomes before cutoffTs
        
        User1->>Proxy: betHome{value: 500 ether}<br/>(Bet 500 CHZ on Home team)
        activate Proxy
        
        Proxy->>Impl: delegatecall betHome()
        activate Impl
        
        Note right of Impl: Check modifiers:<br/>✓ whenNotPaused<br/>✓ onlyBeforeCutoff<br/>✓ nonReentrant
        
        Impl->>Impl: _bet(0, msg.value)
        
        Note right of Impl: Validate bet amount > 0
        
        Impl->>PriceOracle: chzToUsd(500 ether, priceFeed)
        activate PriceOracle
        
        PriceOracle->>Chainlink: latestRoundData()
        activate Chainlink
        Chainlink-->>PriceOracle: price = 10000000 ($0.10/CHZ)<br/>updatedAt = timestamp
        deactivate Chainlink
        
        Note right of PriceOracle: Check staleness:<br/>block.timestamp - updatedAt < 1 hour
        
        PriceOracle->>PriceOracle: usdValue = (500 ether × 10000000) / 1e18<br/>= 5000000000 ($50.00)
        
        PriceOracle-->>Impl: return 5000000000 ($50)
        deactivate PriceOracle
        
        Note right of Impl: Validate minimum:<br/>5000000000 >= 500000000 ✓<br/>($50 >= $5)
        
        Impl->>Impl: Update state:<br/>pool[0] += 500 ether<br/>bets[user1][0] += 500 ether
        
        Impl-->>Proxy: emit BetPlaced(user1, 0, 500 ether, 5000000000)
        deactivate Impl
        
        Proxy-->>User1: Transaction Success ✓
        deactivate Proxy
        
        User2->>Proxy: betDraw{value: 300 ether}
        activate Proxy
        Proxy->>Impl: delegatecall betDraw()
        activate Impl
        Impl->>PriceOracle: chzToUsd(300 ether, priceFeed)
        activate PriceOracle
        PriceOracle->>Chainlink: latestRoundData()
        activate Chainlink
        Chainlink-->>PriceOracle: price = 10000000
        deactivate Chainlink
        PriceOracle-->>Impl: return 3000000000 ($30)
        deactivate PriceOracle
        Impl->>Impl: pool[1] += 300 ether<br/>bets[user2][1] += 300 ether
        Impl-->>Proxy: emit BetPlaced(user2, 1, 300 ether, 3000000000)
        deactivate Impl
        Proxy-->>User2: Transaction Success ✓
        deactivate Proxy
        
        User3->>Proxy: betAway{value: 200 ether}
        activate Proxy
        Proxy->>Impl: delegatecall betAway()
        activate Impl
        Impl->>PriceOracle: chzToUsd(200 ether, priceFeed)
        activate PriceOracle
        PriceOracle->>Chainlink: latestRoundData()
        activate Chainlink
        Chainlink-->>PriceOracle: price = 10000000
        deactivate Chainlink
        PriceOracle-->>Impl: return 2000000000 ($20)
        deactivate PriceOracle
        Impl->>Impl: pool[2] += 200 ether<br/>bets[user3][2] += 200 ether
        Impl-->>Proxy: emit BetPlaced(user3, 2, 200 ether, 2000000000)
        deactivate Impl
        Proxy-->>User3: Transaction Success ✓
        deactivate Proxy
        
        Note over User1,User3: More users can bet...<br/>Total Pool: 1,000 CHZ<br/>Home: 500 | Draw: 300 | Away: 200
    end

    rect rgb(255, 250, 240)
        Note over Admin,Settler: PHASE 4: MATCH ENDS & SETTLEMENT
        
        Note over Settler: ⏰ cutoffTs reached<br/>Match played<br/>Home team wins!
        
        Settler->>Proxy: settle(0)<br/>(Home team wins)
        activate Proxy
        
        Proxy->>Impl: delegatecall settle(0)
        activate Impl
        
        Note right of Impl: Check authorization:<br/>✓ onlyRole(SETTLER_ROLE)<br/>✓ !settled<br/>✓ outcome < outcomesCount (0 < 3)
        
        Impl->>Impl: Calculate totals:<br/>totalPool = 1,000 ether<br/>feeAmount = (1,000 × 200) / 10,000<br/>feeAmount = 20 ether (2%)<br/>distributable = 980 ether
        
        Impl->>Impl: Update state:<br/>settled = true<br/>winningOutcome = 0
        
        Impl-->>Proxy: emit Settled(0, 1000 ether, 20 ether)
        deactivate Impl
        
        Proxy-->>Settler: Settlement Complete ✓
        deactivate Proxy
    end

    rect rgb(250, 240, 255)
        Note over Admin,Settler: PHASE 5: WINNERS CLAIM PAYOUTS
        
        Note over User1: User1 staked 500 CHZ on Home (winner)<br/>Entitled to proportional payout
        
        User1->>Proxy: claim()
        activate Proxy
        
        Proxy->>Impl: delegatecall claim()
        activate Impl
        
        Note right of Impl: Check conditions:<br/>✓ settled = true<br/>✓ !claimed[user1]<br/>✓ bets[user1][0] > 0<br/>✓ pool[0] > 0
        
        Impl->>Impl: Calculate payout:<br/>userStake = 500 ether<br/>winningPool = 500 ether<br/>totalPool = 1,000 ether<br/>feeAmount = 20 ether<br/>distributable = 980 ether<br/><br/>payout = (500 / 500) × 980<br/>payout = 980 ether
        
        Impl->>Impl: Update state (CEI pattern):<br/>claimed[user1] = true<br/>feeBps = 0 (after first claim)
        
        Impl-->>Proxy: emit Claimed(user1, 980 ether)
        deactivate Impl
        
        Note right of Proxy: Transfer fee and payout
        
        Proxy->>Treasury: transfer 20 ether<br/>(Platform fee)
        activate Treasury
        Treasury-->>Proxy: Fee received ✓
        deactivate Treasury
        
        Proxy->>User1: transfer 980 ether<br/>(Payout)
        activate User1
        User1-->>Proxy: Payout received ✓
        deactivate User1
        
        Proxy-->>User1: Claim Complete ✓
        deactivate Proxy
        
        Note over User2,User3: User2 and User3 bet on Draw/Away (losers)<br/>❌ claim() would revert: NothingToClaim
        
        User2->>Proxy: claim()
        activate Proxy
        Proxy->>Impl: delegatecall claim()
        activate Impl
        Note right of Impl: bets[user2][0] = 0<br/>User bet on outcome 1 (Draw)<br/>winningOutcome = 0 (Home)
        Impl--XUser2: ❌ Revert: NothingToClaim
        deactivate Impl
        deactivate Proxy
    end

    rect rgb(240, 240, 240)
        Note over Admin,Settler: SUMMARY & STATE FINAL
        
        Note over Proxy: Match State:<br/>✓ settled = true<br/>✓ winningOutcome = 0 (Home)<br/>✓ pool[0] = 500, pool[1] = 300, pool[2] = 200<br/>✓ Winners claimed: User1 (980 CHZ)<br/>✓ Treasury received: 20 CHZ<br/>✓ Contract balance: 0 CHZ<br/><br/>Parimutuel Formula:<br/>payout = (userStake / winningPool) × distributable<br/>User1: (500/500) × 980 = 980 CHZ<br/>ROI: 96% (980/500 - 1)<br/><br/>Losers forfeit:<br/>User2: -300 CHZ<br/>User3: -200 CHZ
    end